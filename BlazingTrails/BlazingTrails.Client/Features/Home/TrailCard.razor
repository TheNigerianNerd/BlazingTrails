<div class="card  shadow" style="width:  18rem;">
    <img src="@Trail.Image" class="card-img-top" alt="@Trail.Name">
    <div class="card-body">
        <h5 class="card-title">@Trail.Name</h5>
        <h6 class="card-subtitle mb-3  text-muted">
            <span class="oi  oi-map-marker"></span>
            @Trail.Location
        </h6>
        <div class="d-flex  justify-content-between">
            <span>
                <span class="oi  oi-clock  mr-2"></span>
                @Trail.TimeFormatted
            </span>
            <span>
                <span class="oi  oi-infinity  mr-2"></span>
                @Trail.Length km
            </span>
        </div>
    </div>
</div>
<div class="card shadow" style="width: 18rem;" @onclick="OnCardClick">
    <img src="@Trail.Image" class="card-img-top" alt="@Trail.Name">
    <div class="card-body">
        <h5 class="card-title">@Trail.Name</h5>
        <h6 class="card-subtitle mb-3 text-muted">
            <span class="oi oi-map-marker"></span>
            @Trail.Location
        </h6>
        <div class="d-flex justify-content-between">
            <span>
                <span class="oi oi-clock mr-2"></span>
                @Trail.TimeFormatted
            </span>
            <span>
                <span class="oi oi-infinity mr-2"></span>
                @Trail.Length km
            </span>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public Trail Trail { get; set; } = default!;

    // 1. Add the EventCallback parameter
    [Parameter]
    public EventCallback<Trail> OnSelected { get; set; }

    // 2. Implement a method to invoke the callback
    private async Task OnCardClick()
    {
        // Check if the callback has any registered delegates (though it's optional)
        if (OnSelected.HasDelegate)
        {
            // Invoke the callback, passing the Trail object
            await OnSelected.InvokeAsync(Trail);
        }
    }
}